// firebase-security-rules.json
// Firebase Realtime Database Security Rules
{
  "rules": {
    // Root seviye erişim sadece authenticated kullanıcılar için
    ".read": false,
    ".write": false,
    
    "temizlikTakip": {
      // Users tablosu
      "users": {
        "$userId": {
          // Sadece kendi verisini okuyabilir
          ".read": "auth != null && auth.uid == $userId",
          // Sadece admin veya kendisi yazabilir
          ".write": "auth != null && (auth.uid == $userId || root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'admin')",
          
          // User data validation
          ".validate": "newData.hasChildren(['email', 'name', 'role']) && newData.child('email').isString() && newData.child('name').isString() && (newData.child('role').val() == 'admin' || newData.child('role').val() == 'routeman' || newData.child('role').val() == 'viewer')",
          
          "email": {
            ".validate": "newData.isString() && newData.val().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)"
          },
          
          "name": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
          },
          
          "role": {
            ".validate": "newData.val() == 'admin' || newData.val() == 'routeman' || newData.val() == 'viewer'"
          },
          
          "isActive": {
            ".validate": "newData.isBoolean()"
          },
          
          "createdAt": {
            ".validate": "newData.isString()"
          },
          
          "updatedAt": {
            ".validate": "newData.isString()"
          },
          
          "lastLogin": {
            ".validate": "newData.isString()"
          }
        },
        
        // Admin tüm kullanıcıları görebilir
        ".read": "auth != null && root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'admin'"
      },
      
      // Reports tablosu
      "reports": {
        "$reportId": {
          // Rapor sahibi veya admin okuyabilir
          ".read": "auth != null && (data.child('userId').val() == auth.uid || root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'admin' || root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'viewer')",
          
          // Sadece rapor sahibi veya admin yazabilir
          ".write": "auth != null && (data.child('userId').val() == auth.uid || root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'admin' || !data.exists())",
          
          // Yeni rapor oluştururken userId kontrolü
          ".validate": "!data.exists() && newData.child('userId').val() == auth.uid || data.exists() && newData.child('userId').val() == data.child('userId').val()",
          
          "userId": {
            ".validate": "newData.isString() && newData.val() == auth.uid"
          },
          
          "userName": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          
          "location": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
          },
          
          "machineSerialNumber": {
            ".validate": "newData.isString() && newData.val().matches(/^\\d{10}$/)"
          },
          
          "status": {
            ".validate": "newData.val() == 'completed' || newData.val() == 'pending' || newData.val() == 'cancelled' || newData.val() == 'issue' || newData.val() == 'waste'"
          },
          
          "notes": {
            ".validate": "newData.isString()"
          },
          
          "title": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          
          "createdAt": {
            ".validate": "newData.isString()"
          },
          
          "updatedAt": {
            ".validate": "newData.isString()"
          },
          
          // Arıza alanları
          "hasIssue": {
            ".validate": "newData.isBoolean()"
          },
          
          "issueDescription": {
            ".validate": "newData.isString()"
          },
          
          "issueDate": {
            ".validate": "newData.isString()"
          },
          
          "issueResolved": {
            ".validate": "newData.isBoolean()"
          },
          
          "issueResolvedDate": {
            ".validate": "newData.isString()"
          },
          
          // Zayi alanları
          "hasWaste": {
            ".validate": "newData.isBoolean()"
          },
          
          "wasteDate": {
            ".validate": "newData.isString()"
          },
          
          "wasteItems": {
            ".validate": "newData.hasChildren()",
            "$wasteItem": {
              ".validate": "newData.hasChildren(['id', 'productName', 'quantity', 'unit', 'reason'])",
              "id": { ".validate": "newData.isNumber()" },
              "productName": { ".validate": "newData.isString()" },
              "productCode": { ".validate": "newData.isString()" },
              "quantity": { ".validate": "newData.isString()" },
              "unit": { ".validate": "newData.isString()" },
              "reason": { ".validate": "newData.isString()" }
            }
          },
          
          "equipmentChecklist": {
            ".validate": "newData.hasChildren()",
            "$checklistItem": {
              ".validate": "newData.hasChildren(['id', 'text', 'completed'])",
              "id": { ".validate": "newData.isNumber()" },
              "text": { ".validate": "newData.isString()" },
              "completed": { ".validate": "newData.isBoolean()" },
              "completedAt": { ".validate": "newData.isString() || newData.val() == null" }
            }
          },
          
          "cleaningChecklist": {
            ".validate": "newData.hasChildren()",
            "$checklistItem": {
              ".validate": "newData.hasChildren(['id', 'text', 'completed'])",
              "id": { ".validate": "newData.isNumber()" },
              "text": { ".validate": "newData.isString()" },
              "completed": { ".validate": "newData.isBoolean()" },
              "completedAt": { ".validate": "newData.isString() || newData.val() == null" }
            }
          },
          
          "slots": {
            ".validate": "newData.hasChildren()",
            "$slotIndex": {
              ".validate": "newData.hasChildren(['slotNumber', 'commodity', 'quantity', 'expiryDate', 'batchNumber'])",
              "slotNumber": { ".validate": "newData.isNumber()" },
              "commodity": { ".validate": "newData.isString()" },
              "quantity": { ".validate": "newData.isString()" },
              "expiryDate": { ".validate": "newData.isString()" },
              "batchNumber": { ".validate": "newData.isString()" }
            }
          },
          
          "beforePhotos": {
            ".validate": "newData.hasChildren()",
            "$photoIndex": {
              ".validate": "newData.isString() && newData.val().length > 0"
            }
          },
          
          "afterPhotos": {
            ".validate": "newData.hasChildren()",
            "$photoIndex": {
              ".validate": "newData.isString() && newData.val().length > 0"
            }
          },
          
          "issuePhotos": {
            "$photoIndex": {
              ".validate": "newData.isString() && newData.val().length > 0"
            }
          }
        },
        
        // Admin ve viewer tüm raporları görebilir, routeman sadece kendi raporlarını
        ".read": "auth != null",
        ".indexOn": ["userId", "createdAt", "status"]
      },
      
      // CommodityList tablosu - YENİ EKLENEN
      "commodityList": {
        "$commodityId": {
          // Tüm authenticated kullanıcılar okuyabilir
          ".read": "auth != null",
          
          // Sadece admin yazabilir
          ".write": "auth != null && root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'admin'",
          
          // Commodity data validation
          ".validate": "newData.hasChildren(['Commodity code', 'Product name'])",
          
          "Commodity code": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          
          "Product name": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          
          "Unit price": {
            ".validate": "newData.isString() || newData.val() == null"
          },
          
          "Cost price": {
            ".validate": "newData.isString() || newData.val() == null"
          },
          
          "Supplier": {
            ".validate": "newData.isString() || newData.val() == null"
          },
          
          "Specs": {
            ".validate": "newData.isString() || newData.val() == null"
          },
          
          "Type": {
            ".validate": "newData.isString() || newData.val() == null"
          },
          
          "Description": {
            ".validate": "newData.isString() || newData.val() == null"
          },
          
          "createdAt": {
            ".validate": "newData.isString()"
          },
          
          "updatedAt": {
            ".validate": "newData.isString()"
          }
        },
        
        // Tüm authenticated kullanıcılar commodity listesini görebilir
        ".read": "auth != null",
        
        // Sadece admin yeni commodity ekleyebilir
        ".write": "auth != null && root.child('temizlikTakip/users/' + auth.uid + '/role').val() == 'admin'",
        
        // Indexing for better performance
        ".indexOn": ["Commodity code", "Product name", "Supplier"]
      }
    }
  }
}
